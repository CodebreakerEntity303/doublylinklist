// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node * next,*prev ;
}*head,*temp,*q,*tail;
void create();
void display(struct node*head);
void displayrev(struct node*tail);
void insert_beg();
void insert_end();
void insert_pos();
void del_beg();
void del_end();
void del_pos();
void create(){
    int i,n,m;
    printf("how many nodes you want :- ");
    scanf("%d",&n);
    for ( i = 0; i < n; i++)
    {
        temp=(struct node *)malloc(sizeof(struct node));
        printf("enter the data for %d node :- ",i);
        scanf("%d",&m);
        temp->data=m;
        temp->prev=NULL;
        temp->next=NULL;
        if(head==NULL){
            head=tail=temp;
        }
        else{

            tail->next=temp;
            temp->prev=tail;
            tail=temp;
        }
    }
}
void display(struct node*head){
	if(head==NULL){
		printf("list is empty.");
		return;
	}
	else
	{
	temp=head;
    while (temp->next!=NULL)
    {
        printf("data=%d\n",temp->data);
        temp=temp->next;
    }}
}
void displayrev(struct node*tail){
	if(tail==NULL){
		printf("list is empty.");
		return;
	}
	temp=tail;
    while (temp!=NULL)
    {
        printf("data=%d\n",temp->data);
        temp=temp->next;
    }
}
void insert_beg(){
	int m;
	temp=(struct node *)malloc(sizeof(struct node));
	printf("enter the elements :- ");
	scanf("%d",&m);
    temp->prev=NULL;
 	temp->data=m;
    temp->next=NULL;
    if(head==NULL){
	head=tail=temp;
    }
    else{
    	temp->next=head;
        head->prev=temp;
    	head=temp;
	}
}
void insert_end(){
	int m;
	temp=(struct node *)malloc(sizeof(struct node));
	printf("enter the elements :- ");
    temp->prev=NULL;
	scanf("%d",&m);
 	temp->data=m;
    temp->next=NULL;
    if(head==NULL){
	head=temp;
    }
    else{
    	tail->next=temp;
        temp->prev=tail;
    	tail=temp;
    }
}
void insert_pos(){
	int m,pos,i;
	if(head==NULL){
	printf("list is empty");
    }
	temp=(struct node *)malloc(sizeof(struct node));
	printf("enter the element to insert  :- ");
	scanf("%d",&m);
    label1:printf("enter the postion where you want to insert :- ");
    scanf("%d",&pos);
    temp->prev=NULL;
 	temp->data=m;
    temp->next=NULL;
    q=head;
    for(i=0;i<pos-1;i++){
    	if(q->next==NULL){
    		printf("there are less element");
            goto label1;
		}
		q=q->next;
	}
	temp->next=q->next;
	q->next->prev=temp;
    q->next=temp;
    temp->prev=q;
}
void del_beg(){
    if (head==NULL)
    {
        printf("there is no statement to delete ");
    }
    else
    {
        q=head;
        head=head->next;
        printf("the deleted element id %d ",q->data);
        free(q);
    }
    
}
void del_end(){
    if (head==NULL)
    {
        printf("there is no statement to delete ");
    }
    else if(head==tail){
        q=head;
        head=tail=NULL;
        printf("the deleted element id %d ",q->data);
        free(q);        
    }
    else
    {
        q=head;
        while (q->next->next!=NULL)
        {
            q=q->next;
        }
        q->next=temp;
        q=temp->prev;
        q->next=NULL;
        printf("the deleted element id %d ",temp->data);
        free(temp);
    }
}
void del_pos(){
    int pos,i;
    if(tail==NULL)
    {
        printf("list  is empty");
    }
    else
    {
    printf("Enter the position to perform deletion :- ");
    scanf("%d",&pos);
    q=head;
    for(i=0;i<=pos-1;i++){
        if(q->next==NULL){
            printf("less elements");
        }
        q=q->next;
    } 
    temp=q->next;
    q->next=temp->next;
    temp->next->prev=q;
    printf("the element deleted is %d",temp->data);
    free(temp);
}}
int main(){
	while(1){
		int ch;
		printf("1.create\n2.display \n3. insertion at begining \n4.insertion at end\n5.insertion at position\n6.deletion at begining \n7.deletion at end\n8.deletion at position\n9.exit\n");
		printf("ENTER A CHOICE : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
			create();
			break;
			case 2:
			display(head);
            displayrev(tail);
			break;
			case 3:
			insert_beg();
			break;
			case 4:
			insert_end();
			break;
			case 5:
			insert_pos();
			break;
            case 6:
			del_beg();
			break;
			case 7:
			del_end();
			break;
			case 8:
			del_pos();
			break;
			case 9:
			exit(0);
			break;
			default:
			printf("incorrect choice");
		}
	}
}
